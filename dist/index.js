"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = taggedTable;

function taggedTable(strings) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  var rowStrings = String.raw(strings).split("\n").filter(function (v) {
    return v;
  });
  var topLine = rowStrings[0];
  var cleanString = topLine.replace(/\s/g, "");
  var fields = cleanString.split("|");
  var argsIdx = 0;
  var rowData = rowStrings.slice(1, -1);
  var expectedValueLength = rowData.length * fields.length;
  var valueCount = args.length;
  var result = rowData.map(function (row) {
    var rowDataArr = row.split("|").map(function (str) {
      return str.trim();
    });
    valueCount += rowDataArr.filter(function (v) {
      return v;
    }).length;
    return rowDataArr.reduce(function (acc, curr, idx) {
      if (curr === "") {
        var value = args[argsIdx];
        acc[fields[idx]] = value;
        argsIdx += 1;
      } else {
        acc[fields[idx]] = curr;
      }

      return acc;
    }, {});
  });

  if (expectedValueLength !== valueCount) {
    throw new Error("Table formatting error: blank cells");
  } else {
    return result;
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJ0YWdnZWRUYWJsZSIsInN0cmluZ3MiLCJhcmdzIiwicm93U3RyaW5ncyIsIlN0cmluZyIsInJhdyIsInNwbGl0IiwiZmlsdGVyIiwidiIsInRvcExpbmUiLCJjbGVhblN0cmluZyIsInJlcGxhY2UiLCJmaWVsZHMiLCJhcmdzSWR4Iiwicm93RGF0YSIsInNsaWNlIiwiZXhwZWN0ZWRWYWx1ZUxlbmd0aCIsImxlbmd0aCIsInZhbHVlQ291bnQiLCJyZXN1bHQiLCJtYXAiLCJyb3ciLCJyb3dEYXRhQXJyIiwic3RyIiwidHJpbSIsInJlZHVjZSIsImFjYyIsImN1cnIiLCJpZHgiLCJ2YWx1ZSIsIkVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQWUsU0FBU0EsV0FBVCxDQUNiQyxPQURhLEVBR1I7QUFBQSxvQ0FERkMsSUFDRTtBQURGQSxJQUFBQSxJQUNFO0FBQUE7O0FBQ0wsTUFBTUMsVUFBVSxHQUFHQyxNQUFNLENBQUNDLEdBQVAsQ0FBV0osT0FBWCxFQUNoQkssS0FEZ0IsQ0FDVixJQURVLEVBRWhCQyxNQUZnQixDQUVULFVBQUFDLENBQUM7QUFBQSxXQUFJQSxDQUFKO0FBQUEsR0FGUSxDQUFuQjtBQUlBLE1BQU1DLE9BQU8sR0FBR04sVUFBVSxDQUFDLENBQUQsQ0FBMUI7QUFDQSxNQUFNTyxXQUFXLEdBQUdELE9BQU8sQ0FBQ0UsT0FBUixDQUFnQixLQUFoQixFQUF1QixFQUF2QixDQUFwQjtBQUNBLE1BQU1DLE1BQU0sR0FBR0YsV0FBVyxDQUFDSixLQUFaLENBQWtCLEdBQWxCLENBQWY7QUFDQSxNQUFJTyxPQUFPLEdBQUcsQ0FBZDtBQUVBLE1BQU1DLE9BQU8sR0FBR1gsVUFBVSxDQUFDWSxLQUFYLENBQWlCLENBQWpCLEVBQW9CLENBQUMsQ0FBckIsQ0FBaEI7QUFFQSxNQUFNQyxtQkFBbUIsR0FBR0YsT0FBTyxDQUFDRyxNQUFSLEdBQWlCTCxNQUFNLENBQUNLLE1BQXBEO0FBQ0EsTUFBSUMsVUFBVSxHQUFHaEIsSUFBSSxDQUFDZSxNQUF0QjtBQUVBLE1BQU1FLE1BQU0sR0FBR0wsT0FBTyxDQUFDTSxHQUFSLENBQVksVUFBQUMsR0FBRyxFQUFJO0FBQ2hDLFFBQU1DLFVBQVUsR0FBR0QsR0FBRyxDQUFDZixLQUFKLENBQVUsR0FBVixFQUFlYyxHQUFmLENBQW1CLFVBQUFHLEdBQUc7QUFBQSxhQUFJQSxHQUFHLENBQUNDLElBQUosRUFBSjtBQUFBLEtBQXRCLENBQW5CO0FBQ0FOLElBQUFBLFVBQVUsSUFBSUksVUFBVSxDQUFDZixNQUFYLENBQWtCLFVBQUFDLENBQUM7QUFBQSxhQUFJQSxDQUFKO0FBQUEsS0FBbkIsRUFBMEJTLE1BQXhDO0FBRUEsV0FBT0ssVUFBVSxDQUFDRyxNQUFYLENBQWtCLFVBQUNDLEdBQUQsRUFBZ0NDLElBQWhDLEVBQXNDQyxHQUF0QyxFQUE4QztBQUNyRSxVQUFJRCxJQUFJLEtBQUssRUFBYixFQUFpQjtBQUNmLFlBQU1FLEtBQUssR0FBRzNCLElBQUksQ0FBQ1csT0FBRCxDQUFsQjtBQUNBYSxRQUFBQSxHQUFHLENBQUNkLE1BQU0sQ0FBQ2dCLEdBQUQsQ0FBUCxDQUFILEdBQW1CQyxLQUFuQjtBQUNBaEIsUUFBQUEsT0FBTyxJQUFJLENBQVg7QUFDRCxPQUpELE1BSU87QUFDTGEsUUFBQUEsR0FBRyxDQUFDZCxNQUFNLENBQUNnQixHQUFELENBQVAsQ0FBSCxHQUFtQkQsSUFBbkI7QUFDRDs7QUFFRCxhQUFPRCxHQUFQO0FBQ0QsS0FWTSxFQVVKLEVBVkksQ0FBUDtBQVdELEdBZmMsQ0FBZjs7QUFpQkEsTUFBSVYsbUJBQW1CLEtBQUtFLFVBQTVCLEVBQXdDO0FBQ3RDLFVBQU0sSUFBSVksS0FBSixDQUFVLHFDQUFWLENBQU47QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPWCxNQUFQO0FBQ0Q7QUFDRiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRhZ2dlZFRhYmxlPFQ+KFxuICBzdHJpbmdzOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSxcbiAgLi4uYXJnczogYW55W11cbik6IFRbXSB7XG4gIGNvbnN0IHJvd1N0cmluZ3MgPSBTdHJpbmcucmF3KHN0cmluZ3MpXG4gICAgLnNwbGl0KFwiXFxuXCIpXG4gICAgLmZpbHRlcih2ID0+IHYpO1xuXG4gIGNvbnN0IHRvcExpbmUgPSByb3dTdHJpbmdzWzBdO1xuICBjb25zdCBjbGVhblN0cmluZyA9IHRvcExpbmUucmVwbGFjZSgvXFxzL2csIFwiXCIpO1xuICBjb25zdCBmaWVsZHMgPSBjbGVhblN0cmluZy5zcGxpdChcInxcIik7XG4gIGxldCBhcmdzSWR4ID0gMDtcblxuICBjb25zdCByb3dEYXRhID0gcm93U3RyaW5ncy5zbGljZSgxLCAtMSk7XG5cbiAgY29uc3QgZXhwZWN0ZWRWYWx1ZUxlbmd0aCA9IHJvd0RhdGEubGVuZ3RoICogZmllbGRzLmxlbmd0aDtcbiAgbGV0IHZhbHVlQ291bnQgPSBhcmdzLmxlbmd0aDtcblxuICBjb25zdCByZXN1bHQgPSByb3dEYXRhLm1hcChyb3cgPT4ge1xuICAgIGNvbnN0IHJvd0RhdGFBcnIgPSByb3cuc3BsaXQoXCJ8XCIpLm1hcChzdHIgPT4gc3RyLnRyaW0oKSk7XG4gICAgdmFsdWVDb3VudCArPSByb3dEYXRhQXJyLmZpbHRlcih2ID0+IHYpLmxlbmd0aDtcblxuICAgIHJldHVybiByb3dEYXRhQXJyLnJlZHVjZSgoYWNjOiB7IFtmaWVsZDogc3RyaW5nXTogYW55IH0sIGN1cnIsIGlkeCkgPT4ge1xuICAgICAgaWYgKGN1cnIgPT09IFwiXCIpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBhcmdzW2FyZ3NJZHhdO1xuICAgICAgICBhY2NbZmllbGRzW2lkeF1dID0gdmFsdWU7XG4gICAgICAgIGFyZ3NJZHggKz0gMTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFjY1tmaWVsZHNbaWR4XV0gPSBjdXJyO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYWNjO1xuICAgIH0sIHt9KSBhcyBUO1xuICB9KTtcblxuICBpZiAoZXhwZWN0ZWRWYWx1ZUxlbmd0aCAhPT0gdmFsdWVDb3VudCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlRhYmxlIGZvcm1hdHRpbmcgZXJyb3I6IGJsYW5rIGNlbGxzXCIpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbn1cbiJdfQ==